"""
This type stub file was generated by pyright.
"""

class weight:
    """Simple decorator to add a __weight__ property to a function

    Usage: @weight(3.0)
    """
    def __init__(self, val) -> None:
        ...
    
    def __call__(self, func):
        ...
    


class number:
    """Simple decorator to add a __number__ property to a function

    Usage: @number("1.1")

    This field will then be used to sort the test results on Gradescope.
    """
    def __init__(self, val) -> None:
        ...
    
    def __call__(self, func):
        ...
    


class visibility:
    """Simple decorator to add a __visibility__ property to a function

    Usage: @visibility("hidden")

    Options for the visibility field are as follows:

    - `hidden`: test case will never be shown to students
    - `after_due_date`: test case will be shown after the assignment's due date has passed.
      If late submission is allowed, then test will be shown only after the late due date.
    - `after_published`: test case will be shown only when the assignment is explicitly published from the "Review Grades" page
    - `visible` (default): test case will always be shown
    """
    def __init__(self, val) -> None:
        ...
    
    def __call__(self, func):
        ...
    


class hide_errors:
    """Simple decorator to add a __hide_errors__ property to a function

    Usage: @hide_errors("Error message to be shown upon test failure")

    Used to hide the particular source of an error which caused a test to fail.
    Otherwise, a test's particular assertions can be seen by students.
    """
    def __init__(self, val=...) -> None:
        ...
    
    def __call__(self, func):
        ...
    


class tags:
    """Simple decorator to add a __tags__ property to a function

    Usage: @tags("concept1", "concept2")
    """
    def __init__(self, *args) -> None:
        ...
    
    def __call__(self, func):
        ...
    


class leaderboard:
    """Decorator that indicates that a test corresponds to a leaderboard column

    Usage: @leaderboard("high_score"). The string parameter indicates
    the name of the column on the leaderboard

    Then, within the test, set the value by calling
    kwargs['set_leaderboard_value'] with a value. You can make this convenient by
    explicitly declaring a set_leaderboard_value keyword argument, eg.

    ```
    def test_highscore(set_leaderboard_value=None):
        set_leaderboard_value(42)
    ```

    """
    def __init__(self, column_name, sort_order=...) -> None:
        ...
    
    def __call__(self, func): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
        ...
    


class partial_credit:
    """Decorator that indicates that a test allows partial credit

    Usage: @partial_credit(test_weight)

    Then, within the test, set the value by calling
    kwargs['set_score'] with a value. You can make this convenient by
    explicitly declaring a set_score keyword argument, eg.

    ```
    @partial_credit(10)
    def test_partial(set_score=None):
        set_score(4.2)
    ```

    """
    def __init__(self, weight) -> None:
        ...
    
    def __call__(self, func): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
        ...
    


